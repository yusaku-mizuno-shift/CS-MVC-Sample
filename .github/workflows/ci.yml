
name: CI

on:
  pull_request:
    branches:
      - develop

  push:
    branches:
      - develop
      - staging
      - main

jobs:
  ci:
    runs-on: ubuntu-latest
    env:
      sqlServerPassword: 'An9xsUzp'
      sqlServerPort: 11433
      sqlOptions: 'Server=localhost,11433;Database=TestDb;User Id=sa;Password=An9xsUzp;'
      coverageThreshold: 0

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Print Env
      run: printenv | sort

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '6.x'

    - name: Set up SQL Server
      run: |
        docker run -e "ACCEPT_EULA=Y" -e "SA_PASSWORD=${{ env.sqlServerPassword }}" -p ${{ env.sqlServerPort }}:1433 -d mcr.microsoft.com/mssql/server:2022-latest

    - name: Tests
      run: |
        dotnet test MvcMovieTests/MvcMovieTests.csproj --collect:"XPlat Code Coverage" /p:CoverletOutputFormat=cobertura --logger "trx;LogFileName=test-results.trx"
      env:
        sqlOptions: ${{ env.sqlOptions }}

    - name: Publish Test Results
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: ' **/TestResults/test-results.trx'

    - name: Check coverage threshold
      run: |
        REPORT_PATH=$(find . -name 'coverage.cobertura.xml' | sort | tail -n 1)
        LINE_COVERAGE=$(grep -oP '<coverage[^>]*line-rate="[^"]*' $REPORT_PATH | grep -oP 'line-rate="\K[^"]+')
        LINE_COVERAGE=$(echo "$LINE_COVERAGE * 100" | bc)

        if (( $(echo "$LINE_COVERAGE < $coverageThreshold" | bc -l) )); then
          echo "Line Coverage is below threshold"
          exit 1
        fi
  
    - name: Publish Code Coverage Results
      uses: actions/upload-artifact@v4
      with:
        name: code-coverage
        path: '**/coverage.cobertura.xml'

    - name: Check for vulnerable packages
      run: |
        dotnet list package --vulnerable > vulnerability_report.txt

        if grep -q "Severity: High\|Severity: Critical" vulnerability_report.txt; then
          echo "High or Critical vulnerabilities found!"
          cat vulnerability_report.txt
          exit 1
        elif grep -q "Severity: Moderate" vulnerability_report.txt; then
          echo "Moderate vulnerabilities found, but proceeding."
          cat vulnerability_report.txt
        else
          echo "No high or critical vulnerabilities found."
        fi
    
    # Roslynの解析は専用のコマンドがない。dotnet build で解析も行う。
    - name: Roslyn Analysis(Build)
      run: dotnet build MvcMovie/MvcMovie.csproj

