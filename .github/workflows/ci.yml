
name: CI

on:
  pull_request:
    branches:
      - develop

  push:
    branches:
      - develop
      - staging
      - main

jobs:
  ci:
    runs-on: ubuntu-latest
    env:
      sqlServerPassword: 'Pa33worD'
      sqlServerPort: 11433
      sqlOptions: 'Server=localhost,11433;Database=TestDb;User Id=sa;Password=Pa33worD;'
      coverageThreshold: 0

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Print Env
      run: printenv | sort

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '6.x'

    - name: Restore
      run: |
        dotnet restore MvcMovie/MvcMovie.csproj

    - name: Static Analyze
      run: |
        dotnet build MvcMovie/MvcMovie.csproj --no-restore -warnaserror

    - name: Set up SQL Server
      run: |
        docker run -e "ACCEPT_EULA=Y" -e "SA_PASSWORD=${{ env.sqlServerPassword }}" -p ${{ env.sqlServerPort }}:1433 -d mcr.microsoft.com/mssql/server:2022-latest

    - name: Tests
      run: |
        dotnet test MvcMovieTests/MvcMovieTests.csproj --collect:"XPlat Code Coverage" /p:CoverletOutputFormat=cobertura --logger "trx;LogFileName=test-results.trx"
        mkdir -p coverage
        mv $(find MvcMovieTests/TestResults -name 'coverage.cobertura.xml' | head -n 1) coverage/coverage.cobertura.xml
      env:
        sqlOptions: ${{ env.sqlOptions }}

    - name: Publish Test Results
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: ' **/TestResults/test-results.trx'

    - name: Check coverage threshold
      run: |
        LINE_COVERAGE=$(xmllint --xpath 'string(//coverage/@line-rate)' coverage/coverage.cobertura.xml | awk '{print $1 * 100}')
        
        if (( $(echo "$LINE_COVERAGE < $coverageThreshold" | bc -l) )); then
          echo "Line Coverage is below threshold"
          exit 1
        fi
  
    - name: Publish Code Coverage Results
      uses: actions/upload-artifact@v4
      with:
        name: code-coverage
        path: 'coverage/coverage.cobertura.xml'

    - name: Check for vulnerable packages
      run: |
        dotnet list package --vulnerable --format json > vulnerabilities.json
        cat vulnerabilities.json
        vulnerable_packages=$(jq -r '[.projects[].frameworks[]?.vulnerablePackages // []] | add | .[]?' vulnerabilities.json)
        if [ -z "$vulnerable_packages" ]; then
          echo "No vulnerable packages found."
        else
          high_severity_count=$(echo "$vulnerable_packages" | jq '[.[] | select(.severity == "High")] | length')
          if [ "$high_severity_count" -gt 0 ]; then
            echo "##[error]High severity vulnerabilities found: $high_severity_count"
            exit 1
          else
            echo "No high severity vulnerabilities found."
          fi
        fi
