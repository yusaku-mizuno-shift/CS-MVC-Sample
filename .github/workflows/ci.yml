
name: .NET CI Pipeline

on:
  push:
    branches:
      - '**'
jobs:
  ci:
    runs-on: ubuntu-latest
    env:
      SQL_SERVER_PASSWORD: 'Pa33worD'
      SQL_SERVER_PORT: 11433
      SQL_OPTIONS: 'Server=localhost,11433;Database=TestDb;User Id=sa;Password=Pa33worD;'
      COVERAGE_THRESHOLD: 0

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Print Env
      run: printenv | sort

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '6.x'

    - name: Tool Install
      run: |
        sudo apt-get update
        sudo apt-get install -y libxml2-utils
        dotnet tool install --global dotnet-ef

    - name: .NET Restore
      run: |
        dotnet restore MvcMovie/MvcMovie.csproj

    - name: Static Analyze
      run: |
        # dotnet build MvcMovie/MvcMovie.csproj --no-restore -warnaserror
        dotnet build MvcMovie/MvcMovie.csproj --no-restore

    - name: Docker Run SQL Server
      run: |
        docker run -e "ACCEPT_EULA=Y" -e "SA_PASSWORD=${{ env.SQL_SERVER_PASSWORD }}" -p ${{ env.SQL_SERVER_PORT }}:1433 -d mcr.microsoft.com/mssql/server:2022-latest

    # - name: Run DB Migrations
    #   run: |
    #     dotnet ef database update --project MvcMovie/MvcMovie.csproj

    - name: Run Tests
      run: |
        # dotnet test MvcMovieTests/MvcMovieTests.csproj --collect:"XPlat Code Coverage;Format=cobertura;Include=[MvcMovie]MvcMovie.*" --logger "trx;LogFileName=test-results.trx"
        dotnet test MvcMovieTests/MvcMovieTests.csproj /p:CollectCoverage=true /p:CoverletOutput=./coverage/coverage.cobertura.xml /p:CoverletOutputFormat=cobertura --logger "trx;LogFileName=test-results.trx"
        # mkdir -p coverage
        # mv $(find MvcMovieTests/TestResults -name 'coverage.cobertura.xml' | head -n 1) coverage/coverage.cobertura.xml

        if [ ! -f coverage/coverage.cobertura.xml ]; then
          echo "Coverage file not found after tests"
          exit 1
        fi
      env:
        sqlOptions: ${{ env.SQL_OPTIONS }}

    - name: Publish Test Results
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: ' **/TestResults/test-results.trx'

    - name: Check Coverage Threshold
      run: |
        LINE_COVERAGE=$(xmllint --xpath 'string(//coverage/@line-rate)' coverage/coverage.cobertura.xml | awk '{print $1 * 100}')
        echo $LINE_COVERAGE
        if (( $(echo "$LINE_COVERAGE < $COVERAGE_THRESHOLD" | bc -l) )); then
          echo "Line Coverage is below threshold"
          exit 1
        fi
  
    - name: Publish Code Coverage Results
      uses: actions/upload-artifact@v4
      with:
        name: code-coverage
        path: 'coverage/coverage.cobertura.xml'

    - name: Check Vulnerable Packages
      run: |
        dotnet list package --vulnerable --format json > vulnerabilities.json
        vulnerable_packages=$(jq -r '[.projects[].frameworks[]?.topLevelPackages[]?.vulnerabilities // []] | add' vulnerabilities.json)
        if [ -z "$vulnerable_packages" ] || [ "$vulnerable_packages" = "null" ]; then
            echo "No vulnerable packages found."
        else
            high_severity_count=$(echo "$vulnerable_packages" | jq -r '[.[] | select(.severity == "High")] | length')
            if [ "$high_severity_count" -gt 0 ]; then
                echo "##[error]High severity vulnerabilities found: $high_severity_count"
                exit 1
            else
                echo "No high severity vulnerabilities found."
            fi
        fi
