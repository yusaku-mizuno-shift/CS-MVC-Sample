
name: .NET CI Pipeline

on:
  push:
    branches:
      - '**'
jobs:
  ci:
    runs-on: ubuntu-latest
    env:
      SQL_SERVER_PASSWORD: 'Pa33worD'
      SQL_SERVER_PORT: 11433
      SQL_OPTIONS: 'Server=localhost,11433;Database=TestDb;User Id=sa;Password=Pa33worD;'
      COVERAGE_THRESHOLD: 0

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Print Env
      run: printenv | sort

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '6.x'

    - name: Tool Install
      run: |
        dotnet tool install --global dotnet-ef

    - name: .NET Restore
      run: |
        dotnet restore MvcMovie/MvcMovie.csproj

    - name: Static Analyze
      run: |
        # dotnet build MvcMovie/MvcMovie.csproj --no-restore -warnaserror
        dotnet build MvcMovie/MvcMovie.csproj  --configuration Release --no-restore
        # dotnet build MvcMovie/MvcMovie.csproj --no-restore

    - name: Docker Run SQL Server
      run: |
        docker run -e "ACCEPT_EULA=Y" -e "SA_PASSWORD=${{ env.SQL_SERVER_PASSWORD }}" -p ${{ env.SQL_SERVER_PORT }}:1433 -d mcr.microsoft.com/mssql/server:2022-latest

    # - name: Run DB Migrations
    #   run: |
    #     dotnet ef database update --project MvcMovie/MvcMovie.csproj

    - name: Run Tests
      run: |
        dotnet test MvcMovieTests/MvcMovieTests.csproj \
        --logger "trx;LogFileName=test-results.trx" \
        /p:CollectCoverage=true \
        /p:CoverletOutputFormat=cobertura \
        /p:CoverletOutput=./coverage/ \
        /p:Threshold=$COVERAGE_THRESHOLD \
        /p:Include="[MvcMovie]MvcMovie.*" \
        /p:Exclude=\"[MvcMovie]MvcMovie.Migrations.*,[MvcMovie]MvcMovie.Data.*\"
      env:
        sqlOptions: ${{ env.SQL_OPTIONS }}

    - name: Publish Test Results
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: 'MvcMovieTests/TestResults/test-results.trx'
  
    - name: Publish Code Coverage Results
      uses: actions/upload-artifact@v4
      with:
        name: code-coverage
        path: 'MvcMovieTests/coverage/coverage.cobertura.xml'

    - name: Check Vulnerable Packages
      run: |
        dotnet list package --vulnerable --format json > vulnerabilities.json
        vulnerable_packages=$(jq -r '[.projects[].frameworks[]?.topLevelPackages[]?.vulnerabilities // []] | add' vulnerabilities.json)
        if [ -z "$vulnerable_packages" ] || [ "$vulnerable_packages" = "null" ]; then
            echo "No vulnerable packages found."
        else
            high_severity_count=$(echo "$vulnerable_packages" | jq -r '[.[] | select(.severity == "High")] | length')
            if [ "$high_severity_count" -gt 0 ]; then
                echo "##[error]High severity vulnerabilities found: $high_severity_count"
                exit 1
            else
                echo "No high severity vulnerabilities found."
            fi
        fi

    - name: Publish
      run: dotnet publish MvcMovie/MvcMovie.csproj --configuration Release --output ./publish --no-build

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: publish
        path: ./publish

  cd:
    runs-on: windows-latest
    needs: ci
    if: github.ref == 'refs/heads/develop'

    steps:
    - name: Download artifact
      uses: actions/download-artifact@v4
      with:
        name: publish

    # - name: Deploy to Azure Web App (Develop)
    #   uses: azure/webapps-deploy@v3
    #   with:
    #     app-name: 'YOUR_APP_SERVICE_NAME_DEVELOP'
    #     publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_DEVELOP }}
    #     package: ./publish